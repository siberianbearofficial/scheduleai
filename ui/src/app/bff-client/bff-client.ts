//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import {mergeMap as _observableMergeMap, catchError as _observableCatch} from 'rxjs/operators';
import {Observable, throwError as _observableThrow, of as _observableOf} from 'rxjs';
import {Injectable, Inject, Optional} from '@angular/core';
import {HttpClient, HttpHeaders, HttpResponse, HttpResponseBase} from '@angular/common/http';

export const API_BASE_URL = "API_BASE_URL";

@Injectable({
  providedIn: 'root',
})
export class BffClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @return OK
   */
  aiHelper(body: AiHelperRequestModel): Observable<AiHelperResponseModelResponseSchema> {
    let url_ = this.baseUrl + "/api/v1/aiHelper";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processAiHelper(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAiHelper(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AiHelperResponseModelResponseSchema>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AiHelperResponseModelResponseSchema>;
    }));
  }

  protected processAiHelper(response: HttpResponseBase): Observable<AiHelperResponseModelResponseSchema> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AiHelperResponseModelResponseSchema.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<AiHelperResponseModelResponseSchema>(null as any);
  }

  /**
   * @param search (optional)
   * @return OK
   */
  groups(universityId: string, search: string | undefined): Observable<GroupArrayResponseSchema> {
    let url_ = this.baseUrl + "/api/v1/groups?";
    if (universityId === undefined || universityId === null)
      throw new Error("The parameter 'universityId' must be defined and cannot be null.");
    else
      url_ += "universityId=" + encodeURIComponent("" + universityId) + "&";
    if (search === null)
      throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
      url_ += "search=" + encodeURIComponent("" + search) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGroups(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGroups(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<GroupArrayResponseSchema>;
        }
      } else
        return _observableThrow(response_) as any as Observable<GroupArrayResponseSchema>;
    }));
  }

  protected processGroups(response: HttpResponseBase): Observable<GroupArrayResponseSchema> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GroupArrayResponseSchema.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<GroupArrayResponseSchema>(null as any);
  }

  /**
   * @return OK
   */
  mergedPairs(body: MergedPairsRequestSchema): Observable<PairArrayResponseSchema> {
    let url_ = this.baseUrl + "/api/v1/mergedPairs";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processMergedPairs(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMergedPairs(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<PairArrayResponseSchema>;
        }
      } else
        return _observableThrow(response_) as any as Observable<PairArrayResponseSchema>;
    }));
  }

  protected processMergedPairs(response: HttpResponseBase): Observable<PairArrayResponseSchema> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PairArrayResponseSchema.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<PairArrayResponseSchema>(null as any);
  }

  /**
   * @param search (optional)
   * @return OK
   */
  teachers(universityId: string, search: string | undefined): Observable<TeacherArrayResponseSchema> {
    let url_ = this.baseUrl + "/api/v1/teachers?";
    if (universityId === undefined || universityId === null)
      throw new Error("The parameter 'universityId' must be defined and cannot be null.");
    else
      url_ += "universityId=" + encodeURIComponent("" + universityId) + "&";
    if (search === null)
      throw new Error("The parameter 'search' cannot be null.");
    else if (search !== undefined)
      url_ += "search=" + encodeURIComponent("" + search) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processTeachers(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processTeachers(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<TeacherArrayResponseSchema>;
        }
      } else
        return _observableThrow(response_) as any as Observable<TeacherArrayResponseSchema>;
    }));
  }

  protected processTeachers(response: HttpResponseBase): Observable<TeacherArrayResponseSchema> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = TeacherArrayResponseSchema.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<TeacherArrayResponseSchema>(null as any);
  }

  /**
   * @return OK
   */
  universities(): Observable<IUniversityArrayResponseSchema> {
    let url_ = this.baseUrl + "/api/v1/universities";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processUniversities(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUniversities(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<IUniversityArrayResponseSchema>;
        }
      } else
        return _observableThrow(response_) as any as Observable<IUniversityArrayResponseSchema>;
    }));
  }

  protected processUniversities(response: HttpResponseBase): Observable<IUniversityArrayResponseSchema> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = IUniversityArrayResponseSchema.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf<IUniversityArrayResponseSchema>(null as any);
  }
}

export class AiHelperRequestModel implements IAiHelperRequestModel {
  universityId!: string | undefined;
  groupId!: string | undefined;
  prompt!: string | undefined;

  constructor(data?: IAiHelperRequestModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.universityId = _data["universityId"];
      this.groupId = _data["groupId"];
      this.prompt = _data["prompt"];
    }
  }

  static fromJS(data: any): AiHelperRequestModel {
    data = typeof data === 'object' ? data : {};
    let result = new AiHelperRequestModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["universityId"] = this.universityId;
    data["groupId"] = this.groupId;
    data["prompt"] = this.prompt;
    return data;
  }
}

export interface IAiHelperRequestModel {
  universityId: string | undefined;
  groupId: string | undefined;
  prompt: string | undefined;
}

export class AiHelperResponseModel implements IAiHelperResponseModel {
  text!: string | undefined;
  pairs?: Pair[] | undefined;

  constructor(data?: IAiHelperResponseModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.text = _data["text"];
      if (Array.isArray(_data["pairs"])) {
        this.pairs = [] as any;
        for (let item of _data["pairs"])
          this.pairs!.push(Pair.fromJS(item));
      }
    }
  }

  static fromJS(data: any): AiHelperResponseModel {
    data = typeof data === 'object' ? data : {};
    let result = new AiHelperResponseModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["text"] = this.text;
    if (Array.isArray(this.pairs)) {
      data["pairs"] = [];
      for (let item of this.pairs)
        data["pairs"].push(item.toJSON());
    }
    return data;
  }
}

export interface IAiHelperResponseModel {
  text: string | undefined;
  pairs?: Pair[] | undefined;
}

export class AiHelperResponseModelResponseSchema implements IAiHelperResponseModelResponseSchema {
  data!: AiHelperResponseModel;
  detail?: string | undefined;

  constructor(data?: IAiHelperResponseModelResponseSchema) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
    if (!data) {
      this.data = new AiHelperResponseModel();
    }
  }

  init(_data?: any) {
    if (_data) {
      this.data = _data["data"] ? AiHelperResponseModel.fromJS(_data["data"]) : new AiHelperResponseModel();
      this.detail = _data["detail"];
    }
  }

  static fromJS(data: any): AiHelperResponseModelResponseSchema {
    data = typeof data === 'object' ? data : {};
    let result = new AiHelperResponseModelResponseSchema();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : <any>undefined;
    data["detail"] = this.detail;
    return data;
  }
}

export interface IAiHelperResponseModelResponseSchema {
  data: AiHelperResponseModel;
  detail?: string | undefined;
}

export class Group implements IGroup {
  id!: string | undefined;
  name!: string | undefined;

  constructor(data?: IGroup) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): Group {
    data = typeof data === 'object' ? data : {};
    let result = new Group();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    return data;
  }
}

export interface IGroup {
  id: string | undefined;
  name: string | undefined;
}

export class GroupArrayResponseSchema implements IGroupArrayResponseSchema {
  data!: Group[] | undefined;
  detail?: string | undefined;

  constructor(data?: IGroupArrayResponseSchema) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["data"])) {
        this.data = [] as any;
        for (let item of _data["data"])
          this.data!.push(Group.fromJS(item));
      }
      this.detail = _data["detail"];
    }
  }

  static fromJS(data: any): GroupArrayResponseSchema {
    data = typeof data === 'object' ? data : {};
    let result = new GroupArrayResponseSchema();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    data["detail"] = this.detail;
    return data;
  }
}

export interface IGroupArrayResponseSchema {
  data: Group[] | undefined;
  detail?: string | undefined;
}

export class IUniversity implements IIUniversity {
  readonly name?: string | undefined;
  readonly id?: string | undefined;

  constructor(data?: IIUniversity) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).name = _data["name"];
      (<any>this).id = _data["id"];
    }
  }

  static fromJS(data: any): IUniversity {
    data = typeof data === 'object' ? data : {};
    let result = new IUniversity();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    data["id"] = this.id;
    return data;
  }
}

export interface IIUniversity {
  name?: string | undefined;
  id?: string | undefined;
}

export class IUniversityArrayResponseSchema implements IIUniversityArrayResponseSchema {
  data!: IUniversity[] | undefined;
  detail?: string | undefined;

  constructor(data?: IIUniversityArrayResponseSchema) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["data"])) {
        this.data = [] as any;
        for (let item of _data["data"])
          this.data!.push(IUniversity.fromJS(item));
      }
      this.detail = _data["detail"];
    }
  }

  static fromJS(data: any): IUniversityArrayResponseSchema {
    data = typeof data === 'object' ? data : {};
    let result = new IUniversityArrayResponseSchema();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    data["detail"] = this.detail;
    return data;
  }
}

export interface IIUniversityArrayResponseSchema {
  data: IUniversity[] | undefined;
  detail?: string | undefined;
}

export enum MergedPairStatus {
  _0 = 0,
  _1 = 1,
  _2 = 2,
  _3 = 3,
  _4 = 4,
  _5 = 5,
}

export class MergedPairsRequestSchema implements IMergedPairsRequestSchema {
  universityId!: string | undefined;
  groupId!: string | undefined;
  teacherId!: string | undefined;
  startTime!: Date;
  endTime!: Date;

  constructor(data?: IMergedPairsRequestSchema) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.universityId = _data["universityId"];
      this.groupId = _data["groupId"];
      this.teacherId = _data["teacherId"];
      this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
      this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): MergedPairsRequestSchema {
    data = typeof data === 'object' ? data : {};
    let result = new MergedPairsRequestSchema();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["universityId"] = this.universityId;
    data["groupId"] = this.groupId;
    data["teacherId"] = this.teacherId;
    data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
    data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    return data;
  }
}

export interface IMergedPairsRequestSchema {
  universityId: string | undefined;
  groupId: string | undefined;
  teacherId: string | undefined;
  startTime: Date;
  endTime: Date;
}

export class Pair implements IPair {
  teachers?: string[] | undefined;
  groups!: string[] | undefined;
  startTime!: Date;
  endTime!: Date;
  rooms?: string[] | undefined;
  discipline?: string | undefined;
  actType?: string | undefined;
  convenience?: PairConvenience;

  constructor(data?: IPair) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["teachers"])) {
        this.teachers = [] as any;
        for (let item of _data["teachers"])
          this.teachers!.push(item);
      }
      if (Array.isArray(_data["groups"])) {
        this.groups = [] as any;
        for (let item of _data["groups"])
          this.groups!.push(item);
      }
      this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
      this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
      if (Array.isArray(_data["rooms"])) {
        this.rooms = [] as any;
        for (let item of _data["rooms"])
          this.rooms!.push(item);
      }
      this.discipline = _data["discipline"];
      this.actType = _data["actType"];
      this.convenience = _data["convenience"] ? PairConvenience.fromJS(_data["convenience"]) : <any>undefined;
    }
  }

  static fromJS(data: any): Pair {
    data = typeof data === 'object' ? data : {};
    let result = new Pair();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.teachers)) {
      data["teachers"] = [];
      for (let item of this.teachers)
        data["teachers"].push(item);
    }
    if (Array.isArray(this.groups)) {
      data["groups"] = [];
      for (let item of this.groups)
        data["groups"].push(item);
    }
    data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
    data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
    if (Array.isArray(this.rooms)) {
      data["rooms"] = [];
      for (let item of this.rooms)
        data["rooms"].push(item);
    }
    data["discipline"] = this.discipline;
    data["actType"] = this.actType;
    data["convenience"] = this.convenience ? this.convenience.toJSON() : <any>undefined;
    return data;
  }
}

export interface IPair {
  teachers?: string[] | undefined;
  groups: string[] | undefined;
  startTime: Date;
  endTime: Date;
  rooms?: string[] | undefined;
  discipline?: string | undefined;
  actType?: string | undefined;
  convenience?: PairConvenience;
}

export class PairArrayResponseSchema implements IPairArrayResponseSchema {
  data!: Pair[] | undefined;
  detail?: string | undefined;

  constructor(data?: IPairArrayResponseSchema) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["data"])) {
        this.data = [] as any;
        for (let item of _data["data"])
          this.data!.push(Pair.fromJS(item));
      }
      this.detail = _data["detail"];
    }
  }

  static fromJS(data: any): PairArrayResponseSchema {
    data = typeof data === 'object' ? data : {};
    let result = new PairArrayResponseSchema();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    data["detail"] = this.detail;
    return data;
  }
}

export interface IPairArrayResponseSchema {
  data: Pair[] | undefined;
  detail?: string | undefined;
}

export class PairConvenience implements IPairConvenience {
  coefficient!: number;
  collisions?: Pair[] | undefined;
  waitTime?: string | undefined;
  status?: MergedPairStatus;

  constructor(data?: IPairConvenience) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.coefficient = _data["coefficient"];
      if (Array.isArray(_data["collisions"])) {
        this.collisions = [] as any;
        for (let item of _data["collisions"])
          this.collisions!.push(Pair.fromJS(item));
      }
      this.waitTime = _data["waitTime"];
      this.status = _data["status"];
    }
  }

  static fromJS(data: any): PairConvenience {
    data = typeof data === 'object' ? data : {};
    let result = new PairConvenience();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["coefficient"] = this.coefficient;
    if (Array.isArray(this.collisions)) {
      data["collisions"] = [];
      for (let item of this.collisions)
        data["collisions"].push(item.toJSON());
    }
    data["waitTime"] = this.waitTime;
    data["status"] = this.status;
    return data;
  }
}

export interface IPairConvenience {
  coefficient: number;
  collisions?: Pair[] | undefined;
  waitTime?: string | undefined;
  status?: MergedPairStatus;
}

export class Teacher implements ITeacher {
  id!: string | undefined;
  fullName!: string | undefined;
  departments?: string[] | undefined;

  constructor(data?: ITeacher) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.fullName = _data["fullName"];
      if (Array.isArray(_data["departments"])) {
        this.departments = [] as any;
        for (let item of _data["departments"])
          this.departments!.push(item);
      }
    }
  }

  static fromJS(data: any): Teacher {
    data = typeof data === 'object' ? data : {};
    let result = new Teacher();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["fullName"] = this.fullName;
    if (Array.isArray(this.departments)) {
      data["departments"] = [];
      for (let item of this.departments)
        data["departments"].push(item);
    }
    return data;
  }
}

export interface ITeacher {
  id: string | undefined;
  fullName: string | undefined;
  departments?: string[] | undefined;
}

export class TeacherArrayResponseSchema implements ITeacherArrayResponseSchema {
  data!: Teacher[] | undefined;
  detail?: string | undefined;

  constructor(data?: ITeacherArrayResponseSchema) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["data"])) {
        this.data = [] as any;
        for (let item of _data["data"])
          this.data!.push(Teacher.fromJS(item));
      }
      this.detail = _data["detail"];
    }
  }

  static fromJS(data: any): TeacherArrayResponseSchema {
    data = typeof data === 'object' ? data : {};
    let result = new TeacherArrayResponseSchema();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    data["detail"] = this.detail;
    return data;
  }
}

export interface ITeacherArrayResponseSchema {
  data: Teacher[] | undefined;
  detail?: string | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: {
  [key: string]: any;
}, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}

